#pragma once

#include "structs/matrix.h"

#include <array>
#include <vector>
#include <algorithm>

template <size_t Height, size_t Width>
using aes_block = matrix<uint8_t, Height, Width>;

struct aes_transformations
{
	aes_transformations() = delete;

	// about shift rows step: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#The_ShiftRows_step
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> shift_rows(const aes_block<Height, Width>& block)
	{
		aes_block<Height, Width> new_block = block;

		for(size_t row_index = 1; row_index < Height; ++row_index)
		{
			uint8_t* row = &new_block.at(row_index, 0);

			std::vector<uint8_t> buffer(row_index);

			for(size_t i = 0; i < row_index; ++i)
				buffer[i] = row[i];

			for (size_t i = row_index; i < Width; ++i)
				row[i - row_index] = row[i];

			for (size_t i = Width - row_index, j = 0; i < Width; ++i, ++j)
				row[i] = buffer[j];
		}

		return block;
	}

	// as shift rows step, but conversely
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> inv_shift_rows(const aes_block<Height, Width>& block)
	{
		aes_block<Height, Width> new_block = block;

		for (size_t row_index = 1; row_index < Height; ++row_index)
		{
			uint8_t* row = &new_block.at(row_index, 0);

			std::vector<uint8_t> buffer(row_index);

			for (size_t i = Width - row_index, j = 0; i < Width; ++i, ++j)
				buffer[j] = row[i];

			for (size_t i = Width - row_index - 1, j = Width - 1; i != std::numeric_limits<size_t>::max(); --i, --j)
				row[j] = row[i];

			for (size_t i = 0; i < row_index; ++i)
				row[i] = buffer[i];
		}

		return block;
	}

	// about sub bytes step: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#The_SubBytes_step
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> sub_bytes(const aes_block<Height, Width>& block)
	{
		aes_block<Height, Width> new_block = block;

		for (size_t i = 0; i < Height; ++i)
		{
			for (size_t j = 0; j < Height; ++j)
			{
				new_block.at(i, j) = s_box[new_block.value_at(i, j)];
			}
		}

		return new_block;
	}

	// as sub bytes step, but use inverse s_box
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> inv_sub_bytes(const aes_block<Height, Width>& block)
	{
		aes_block<Height, Width> new_block = block;

		for (size_t i = 0; i < Height; ++i)
		{
			for (size_t j = 0; j < Height; ++j)
			{
				new_block.at(i, j) = inv_s_box[new_block.value_at(i, j)];
			}
		}

		return new_block;
	}

	// about add round key: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#The_AddRoundKey_step
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> add_round_key(const aes_block<Height, Width>& state, const aes_block<Height, Width>& key)
	{
		aes_block<Height, Width> new_block;

		for (size_t i = 0; i < Height * Width; i++)
			new_block.data_array.at(i) = state.data_array.at(i) ^ key.data_array.at(i);

		return new_block;
	}

	// converts std::string to one aes-block
	template <size_t Height, size_t Width>
	static aes_block<Height, Width> message_to_block(std::string message)
	{
		aes_block<Height, Width> block;

		std::copy(message.begin(), message.end(), block.begin());

		return block;
	}

	// converts std::string to many aes-blocks
	template <size_t Height, size_t Width>
	static std::vector<aes_block<Height, Width>> message_to_blocks(std::string message)
	{
		const size_t block_size = Height * Width;
		
		if (message.size() < block_size)
			message.resize(block_size);

		if (message.size() % block_size != 0)
			message.resize(message.size() + (block_size - message.size() % block_size));

		std::vector<aes_block<Height, Width>> blocks { message.size() / 16 };

		for(size_t i = 0; i < blocks.size(); ++i)
		{
			aes_block<Height, Width>& block = blocks[i];

			std::copy(message.data() + i * block_size, message.data() + i * block_size + block_size, block.begin());
		}

		return blocks;
	}

	// converts many aes-blocks to std::string
	template <size_t Height, size_t Width>
	static std::string blocks_to_message(std::vector<aes_block<Height, Width>> blocks)
	{
		std::string message;
		message.reserve(blocks.size() * Height * Width);

		for (aes_block<Height, Width>& state : blocks)
			for (size_t j = 0; j < Height * Width; j++)
				message += state.data_array[j];

		return message;
	}
	
	struct individual
	{
		individual() = delete;

		template<size_t Width>
		static std::array<uint8_t, Width> rot_word(const std::array<uint8_t, Width>& column)
		{
			std::array<uint8_t, Width> new_column;

			for (size_t i = 1; i < Width; ++i)
				new_column[i - 1] = column[i];

			new_column[Width - 1] = column[0];

			return new_column;
		}

		template<size_t Width>
		static std::array<uint8_t, Width> sub_bytes(const std::array<uint8_t, Width>& column)
		{
			std::array<uint8_t, Width> new_column{};

			for (size_t i = 0; i < Width; i++)
				new_column[i] = s_box[column[i]];

			return new_column;
		}

		template<size_t Width>
		static std::array<uint8_t, Width> xor(const std::array<uint8_t, Width>& a, const std::array<uint8_t, Width>& b)
		{
			std::array<uint8_t, Width> new_column{};

			for (size_t i = 0; i < Width; i++)
				new_column[i] = a[i] ^ b[i];

			return new_column;
		}

		template<size_t Width>
		static std::array<uint8_t, Width> rcon_xor(const std::array<uint8_t, Width>& column, size_t rcon_item_n)
		{
			std::array<uint8_t, Width> new_array = column;

			new_array[0] ^= r_con[rcon_item_n];

			return new_array;
		}

		struct gf28
		{
			gf28() = delete;

			// method: https://en.wikipedia.org/wiki/Finite_field_arithmetic#Multiplication
			static uint8_t multiply(uint8_t a, uint8_t b)
			{
				struct x_time
				{
					static uint8_t product(const uint8_t x)
					{
						return (x << 1) ^ ((x >> 7 & 1) * 0x1b);
					}
				};

				uint8_t c = 0;

				for (uint32_t i = 0; i < 8; i++)
				{
					const uint8_t first_bit = b & 1;
					if (first_bit != 0)
					{
						uint8_t d = a;

						for (uint32_t j = 0; j < i; j++)
							d = x_time::product(d);

						c ^= d;
					}
					b >>= 1;
				}

				return c;
			}
		};

		// about key schedule: https://en.wikipedia.org/wiki/Rijndael_key_schedule#The_key_schedule
		static std::array<aes_block<4, 4>, 10> key_expansion_128(const aes_block<4, 4>& cipher_key)
		{
			std::array<aes_block<4, 4>, 11> keys {cipher_key};

			for(size_t i = 1; i < 11; ++i)
			{
				const std::array<uint8_t, 4> first_column_orig = keys[i - 1].get_column(0);
				const std::array<uint8_t, 4> fourth_column_orig = keys[i - 1].get_column(3);

				const std::array<uint8_t, 4> first_new_column = xor(first_column_orig, rcon_xor(sub_bytes(rot_word(fourth_column_orig)), i));
				const std::array<uint8_t, 4> second_new_column = xor(keys[i - 1].get_column(1), first_new_column);
				const std::array<uint8_t, 4> third_new_column = xor(keys[i - 1].get_column(2), second_new_column);
				const std::array<uint8_t, 4> fourth_new_column = xor(keys[i - 1].get_column(3), third_new_column);

				aes_block<4, 4> round_key;
				round_key.set_column(first_new_column, 0);
				round_key.set_column(second_new_column, 1);
				round_key.set_column(third_new_column, 2);
				round_key.set_column(fourth_new_column, 3);

				keys[i] = round_key;
			}

			std::array<aes_block<4, 4>, 10> round_keys
			{
				keys[1], keys[2], keys[3], keys[4], keys[5],
				keys[6],keys[7], keys[8], keys[9], keys[10]
			};

			return round_keys;
		}

		// about mix columns step: https://en.wikipedia.org/wiki/Rijndael_MixColumns
		static aes_block<4, 4> mix_columns_128(const aes_block<4, 4>& block)
		{
			aes_block<4, 4> new_block = block;

			for(size_t i = 0; i < 4; ++i)
			{
				std::array<uint8_t, 4> temp = new_block.get_column(i);

				new_block.at(0, i) = gf28::multiply(2, temp[0]) ^ gf28::multiply(3, temp[1]) ^ temp[2] ^ temp[3];
				new_block.at(1, i) = temp[0] ^ gf28::multiply(2, temp[1]) ^ gf28::multiply(3, temp[2]) ^ temp[3];
				new_block.at(2, i) = temp[0] ^ temp[1] ^ gf28::multiply(2, temp[2]) ^ gf28::multiply(3, temp[3]);
				new_block.at(3, i) = gf28::multiply(3, temp[0]) ^ temp[1] ^ temp[2] ^ gf28::multiply(2, temp[3]);
			}
			
			return new_block;
		}

		// about inverse mix columns step: https://en.wikipedia.org/wiki/Rijndael_MixColumns#InverseMixColumns
		static aes_block<4, 4> inv_mix_columns_128(const aes_block<4, 4>& block)
		{
			aes_block<4, 4> new_block = block;

			for (size_t i = 0; i < 4; ++i)
			{
				std::array<uint8_t, 4> temp = new_block.get_column(i);

				new_block.at(0, i) = gf28::multiply(14, temp[0]) ^ gf28::multiply(11, temp[1]) ^ gf28::multiply(13, temp[2]) ^ gf28::multiply(9, temp[3]);
				new_block.at(1, i) = gf28::multiply(9, temp[0]) ^ gf28::multiply(14, temp[1]) ^ gf28::multiply(11, temp[2]) ^ gf28::multiply(13, temp[3]);
				new_block.at(2, i) = gf28::multiply(13, temp[0]) ^ gf28::multiply(9, temp[1]) ^ gf28::multiply(14, temp[2]) ^ gf28::multiply(11, temp[3]);
				new_block.at(3, i) = gf28::multiply(11, temp[0]) ^ gf28::multiply(13, temp[1]) ^ gf28::multiply(9, temp[2]) ^ gf28::multiply(14, temp[3]);
			}

			return new_block;
		}
	};

	// about s_box: https://en.wikipedia.org/wiki/Rijndael_S-box#Forward_S-box
	constexpr static uint8_t s_box[] = {
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
	};

	// about inverse s_box: https://en.wikipedia.org/wiki/Rijndael_S-box#Inverse_S-box
	constexpr static uint8_t inv_s_box[] = {
		0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
		0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
		0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
		0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
		0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
		0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
		0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
		0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
		0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
		0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
		0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
		0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
		0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
		0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
		0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
	};

	// about round constants: https://en.wikipedia.org/wiki/Rijndael_key_schedule#Round_constants
	constexpr static uint8_t r_con[] = {
		0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
	};
};